# chezmoi:template:left-delimiter="# [[" right-delimiter="]] #"
# ~/.gitconfig
# This is a template managed by chezmoi
# Platform-specific and best practices Git configuration

[user]
    name = # [[ .name ]] #
# [[ if (hasKey . "email") ]] #
    email = # [[ .email ]] #
# [[ end ]] #

[core]
    # Use Neovim as default editor
    editor = nvim
    # Avoid issues with line endings between platforms
    autocrlf = input
    # Enable symlinks on all platforms
    symlinks = true
    # Ensure proper quoting of file names
    quotepath = false
    # Use bat as pager (your preferred tool)
    pager = "bat --style=plain"
    # Store global exclusions
    excludesfile = ~/.gitignore_global
    # Store global attributes
    attributesfile = ~/.gitattributes_global
    # Don't keep temporary files
    keepBackup = false
    keepTempFiles = false

[init]
    # Set default branch name to main
    defaultBranch = main
    # Use custom template with pre-commit hook
    templateDir = ~/.git_template

[pull]
    # Rebase by default when pulling
    rebase = true
    # Only allow fast-forward merges when pulling
    ff = only

[push]
    # Push to the remote branch with the same name as the local branch
    default = current
    # Automatically create upstream branch when pushing
    autoSetupRemote = true
    # Always push to origin by default
    remote = origin

[fetch]
    # Automatically prune deleted branches from remote
    prune = true
    # Automatically fetch tags
    pruneTags = true
    # Check integrity of transferred objects
    fsckObjects = true

[branch]
    # Sort branches by commit date when listing
    sort = committerdate
    # Automatically set up the push remote
    autoSetupMerge = always

[transfer]
    # Check integrity of objects during transfer
    fsckObjects = true

[receive]
    # Check integrity of objects during receive
    fsckObjects = true

[status]
    # Use short format for status
    short = true
    # Show branch info in status
    branch = true
    # Show stash information
    showStash = true

[color]
    # Use colors in Git commands when possible
    ui = auto

[diff]
    # Use histogram algorithm for better diffs
    algorithm = histogram
    # Use inline diff format
    colorMoved = default
    # Add VSCode as an alternative diff tool
    guitool = vscode
    # Make difftastic the default external diff tool
    external = difft
    # Set difftastic as the default diff tool
    tool = difftastic

[difftool "difftastic"]
    cmd = difft --display=inline "$LOCAL" "$REMOTE"

[difftool "vscode"]
    cmd = code --wait --diff "$LOCAL" "$REMOTE"

[difftool]
    prompt = false

[pager]
    # Use bat with proper flags for difftastic output
    diff = "bat --style=plain"
    show = "bat --style=plain"
    log = "bat --style=plain"
    difftool = true

[merge]
    # Include summaries of merged commits in new merge commits
    log = true
    # Use zdiff3 for more detailed conflict resolution
    conflictstyle = zdiff3
    # Always use rebase for merging
    ff = only
    # Use fugitive as the default merge tool
    tool = fugitive

[mergetool "vscode"]
    cmd = code --wait "$MERGED"
    trustExitCode = true

[mergetool "nvim"]
    cmd = nvim -d "$LOCAL" "$REMOTE" "$MERGED" -c 'wincmd J | wincmd ='
    trustExitCode = true

[mergetool "fugitive"]
    cmd = nvim -f -c \"Gvdiffsplit!\" \"$MERGED\"
    trustExitCode = true

[mergetool]
    prompt = false
    keepBackup = false

[rebase]
    # Auto-stash before rebasing
    autoStash = true
    # Auto-squash commits marked as fixup or squash
    autosquash = true

[rerere]
    # Enable the recording of resolved conflicts
    enabled = true
    # Auto-stage files on conflict resolution
    autoUpdate = true

[help]
    # Automatically correct mistyped commands
    autocorrect = 10

[alias]
    # Use difftastic for diffs (recommended method)
    dft = "!f() { GIT_EXTERNAL_DIFF=difft git diff $@; }; f"
    dlog = "!f() { GIT_EXTERNAL_DIFF=difft git log -p $@; }; f"
    dshow = "!f() { GIT_EXTERNAL_DIFF=difft git show $@; }; f"

    # Shorter status command
    st = status
    # Shorter checkout command
    co = checkout
    # Shorter branch command
    br = branch
    # Shorter commit command
    ci = commit
    # Show commit graph with branch names
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # Enhanced log formats
    ll = log --topo-order --abbrev-commit --pretty=format:'%C(bold blue)%h%Creset %Cgreen(%cr)%Creset %s %C(dim white)<%an>%Creset%C(bold yellow)%d%Creset'
    betterlog = !git --no-pager ll --reverse
    graphlog = ll --graph
    # Show all branches with their last commit
    branches = branch -a -v
    # Stash changes and keep working directory
    save = stash push -u
    # Show all stashes
    stashes = stash list
    # Get the current branch name
    current = rev-parse --abbrev-ref HEAD
    # Check out a pull request from GitHub
    pr = "!f() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; f"
    # List aliases
    aliases = config --get-regexp '^alias\\.'
    # Amend the previous commit without changing the commit message
    amend = commit --amend --no-edit
    # Interactively rebase the last n commits
    reb = "!f() { git rebase -i HEAD~$1; }; f"
    # Undo the last commit
    undo = reset --soft HEAD^
    # Discard all local changes
    discard = reset --hard
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    # Use VSCode for viewing changes
    vsdiff = difftool --tool=vscode
    # Use VSCode for resolving merge conflicts
    vsmerge = mergetool --tool=vscode
    # Use neovim for resolving merge conflicts
    nvimmerge = mergetool --tool=nvim
    # Use fugitive for resolving merge conflicts
    fugmerge = mergetool --tool=fugitive

[credential]
    # Cache credentials for 1 hour (3600 seconds)
    helper = cache --timeout=3600
    # [[ if eq .chezmoi.os "darwin" ]] #
    # Use macOS keychain for credential storage
    helper = osxkeychain
    # [[ end ]] #

    # Use GitHub CLI as the credential helper
    # This requires running 'gh auth login' manually first
    # It will not auto-login without explicit authentication
    helper = !gh auth git-credential

# [[ if eq .chezmoi.os "darwin" ]] #
[url "git@github.com:"]
    # Short syntax for SSH GitHub repositories
    insteadOf = gh:
# [[ else ]] #
[url "https://github.com/"]
    # Short syntax for HTTPS GitHub repositories on Linux
    insteadOf = gh:
# [[ end ]] #

# [[ if eq .chezmoi.os "darwin" ]] #
[url "ssh://git@github.com/"]
    # Use SSH instead of HTTPS for GitHub
    insteadOf = https://github.com/
# [[ else ]] #
# On remote servers, prefer HTTPS over SSH to avoid firewall issues
[url "https://github.com/"]
    insteadOf = git://github.com/
    insteadOf = ssh://git@github.com/
    insteadOf = git@github.com:
# [[ end ]] #

# [[ if eq .chezmoi.os "darwin" ]] #
[url "git@gitlab.com:"]
    # Short syntax for SSH GitLab repositories
    insteadOf = gl:
# [[ else ]] #
[url "https://gitlab.com/"]
    # Short syntax for HTTPS GitLab repositories on Linux
    insteadOf = gl:
# [[ end ]] #

[lfs]
    # Enable Git LFS
    enable = true
    # Skip smudge (download) during checkout
    skipsmudge = false
    # Set default batch size for LFS operations
    batchsize = 100
    # Set concurrency for LFS operations
    concurrenttransfers = 8

[filter "lfs"]
    # Clean, smudge, and required settings for Git LFS
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

# Jupyter notebook diff and merge tools configuration
# These sections will be active only if nbdime is installed
# You can run: nbdime config-git --global --enable to properly configure these
[diff "jupyternotebook"]
    command = git-nbdiffdriver diff

[merge "jupyternotebook"]
    driver = git-nbmergedriver merge %O %A %B %L %P
    name = jupyter notebook merge driver

[difftool "nbdime"]
    cmd = git-nbdifftool diff "$LOCAL" "$REMOTE" "$BASE"

[mergetool "nbdime"]
    cmd = git-nbmergetool merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
