# chezmoi:template:left-delimiter="# [[" right-delimiter="]] #"

# Fish shell configuration file

###########################################
# HOMEBREW INITIALIZATION - MUST COME FIRST
###########################################

# [[ if eq .chezmoi.os "darwin" -]] #
# Helper function to check if Homebrew is installed
function is_brew_installed
    command -v brew >/dev/null 2>&1
end

# Initialize Homebrew first to ensure correct binary paths
if is_brew_installed
    # Use brew shellenv to properly set up all Homebrew environment variables
    eval "$(brew shellenv)"
end
# [[ end ]] #

# Add ~/.local/bin to PATH if it exists
if test -d $HOME/.local/bin
    fish_add_path $HOME/.local/bin
end

###########################################
# ENVIRONMENT VARIABLES
###########################################

# Basic environment variables
set -gx EDITOR nvim
set -gx VISUAL nvim
# Use a widely supported terminal type
set -gx TERM xterm-256color

# WezTerm specific settings
if test "$TERM_PROGRAM" = WezTerm
    # Enable true color support and italics
    set -gx COLORTERM truecolor
end

# Set Git external diff tool if available
if type -q difft
    set -gx GIT_EXTERNAL_DIFF difft
end

###########################################
# PATH CONFIGURATION
###########################################



# Add fzf bin directory to PATH if it exists
if test -d $HOME/.fzf/bin
    fish_add_path $HOME/.fzf/bin
end

# Add Rust/Cargo to PATH if it exists
if test -d $HOME/.cargo/bin
    fish_add_path $HOME/.cargo/bin
end

# Google Cloud SDK configuration
# [[ if eq .chezmoi.os "darwin" -]] #
# Check for Google Cloud SDK in Homebrew locations on macOS
if is_brew_installed
    set -l brew_prefix (brew --prefix)
    if test -d "$brew_prefix/Caskroom/google-cloud-sdk"
        fish_add_path "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"

        if test -f "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc"
            source "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc"
        end
    end
end
# [[ else -]] #
# Linux Google Cloud SDK installation
if test -d $HOME/.local/google-cloud-sdk
    # Directly add the bin directory to PATH
    fish_add_path $HOME/.local/google-cloud-sdk/bin

    # Set up Python for Google Cloud SDK
    set -gx CLOUDSDK_PYTHON /usr/bin/python3

    # Source the completion file if it exists
    if test -f $HOME/.local/google-cloud-sdk/path.fish.inc
        source $HOME/.local/google-cloud-sdk/path.fish.inc
    end
end
# [[ end -]] #

# Add atuin (shell history) bin directory to PATH if it exists
if test -d $HOME/.atuin/bin
    fish_add_path $HOME/.atuin/bin
end

###########################################
# FZF CONFIGURATION
###########################################

# Setup fzf to use terminal colors with sensible defaults
set -gx FZF_DEFAULT_OPTS "--layout=reverse --border"

###########################################
# TOOL INITIALIZATION
###########################################

# [[ if eq .chezmoi.os "darwin" -]] #
# On macOS, use Homebrew to install fonts if needed
function ensure_nerd_font_installed --argument font_name
    if is_brew_installed
        # Convert font name to homebrew cask name format
        set -l font_cask_name "font-"(string lower $font_name)"-nerd-font"

        # Check if the font is already installed via Homebrew
        if not brew list --cask $font_cask_name &>/dev/null
            echo "$font_name Nerd Font not installed. Installing via Homebrew..."
            brew install --cask $font_cask_name
        else
            echo "$font_name Nerd Font is already installed."
        end
    else
        echo "Homebrew is not installed. Cannot install $font_name Nerd Font."
    end
end

# Install FiraCode Nerd Font if needed
ensure_nerd_font_installed "fira-code"
# [[ else -]] #
# Explicitly source the Nerd Font functions to ensure they are available
if test -f $HOME/.config/fish/functions/install_nerd_font.fish
    source $HOME/.config/fish/functions/install_nerd_font.fish
end

# On Linux, use the install_nerd_font function
if functions -q is_nerd_font_installed
    if not is_nerd_font_installed "FiraCode"
        echo "FiraCode Nerd Font not installed. Installing..."
        install_nerd_font "FiraCode"
    end
end
# [[ end -]] #

# Initialize starship prompt if installed
if type -q starship
    starship init fish | source
end

# Initialize zoxide (smarter cd) if installed
if type -q zoxide
    zoxide init fish --cmd cd | source
end

# Initialize direnv if installed
if type -q direnv
    direnv hook fish | source
end

# Initialize chezmoi completions if installed
if type -q chezmoi
    chezmoi completion fish | source
end

# Initialize fzf if installed
if type -q fzf
    # Set up fzf key bindings but tell it not to bind Ctrl-r since atuin will use it
    set -x FZF_DISABLE_KEYBINDINGS 1
    fzf --fish | source

    # Manually bind fzf keys except for Ctrl-r
    bind \ct __fzf_search_current_dir
    bind \ec __fzf_search_history
    bind \eC '__fzf_cd --hidden'
end

# Initialize atuin (shell history) if installed - after fzf to override any bindings
if type -q atuin
    set -gx ATUIN_NOBIND true
    atuin init fish | source

    # bind to ctrl-r in normal and insert mode, add any other bindings you want here too
    bind \cr _atuin_search
    bind -M insert \cr _atuin_search
end

# Set up Docker completions if installed
if type -q docker
    # Add docker completions if they exist
    if test -d ~/.config/fish/completions
        and not test -f ~/.config/fish/completions/docker.fish
        # Docker provides completions via the CLI
        docker completion fish >~/.config/fish/completions/docker.fish 2>/dev/null
    end
end

# Configure nbdime for Jupyter notebook diffs if installed
if type -q nbdime
    # Check if nbdime is already configured in .gitconfig by checking both configuration options
    set -l notebook_diff_config (git config --get diff.jupyternotebook.command)
    set -l nbdime_difftool_config (git config --get difftool.nbdime.cmd)

    if test -z "$notebook_diff_config" && test -z "$nbdime_difftool_config"
        echo "Configuring nbdime as git diff/merge driver for Jupyter notebooks..."
        nbdime config-git --global --enable

        # Verify configuration was successful
        set -l config_check (git config --get diff.jupyternotebook.command)
        if test -z "$config_check"
            echo "Trying alternative configuration approach for nbdime..."
            nbdime config-git --global --enable --skip-git-and-pip-check
        end
    end
end

###########################################
# ALIASES AND SHORTCUTS
###########################################

# Source aliases file
if test -f $HOME/.config/fish/aliases.fish
    source $HOME/.config/fish/aliases.fish
end

###########################################
# DOTFILES MANAGEMENT
###########################################

function dotfiles_doctor --description "Check dotfiles health and tool installations"
    set -l success_icon "✓"
    set -l warning_icon "!"
    set -l error_icon "✗"

    echo "Dotfiles Health Check"
    echo ""
    echo "System information:"
    echo "  $success_icon hostname:       "(hostname)
    echo "  $success_icon os:             # [[ .chezmoi.os ]] #
    echo "  $success_icon arch:           # [[ .chezmoi.arch ]] #
    echo -n "  $success_icon chezmoi version: "
    command -v chezmoi >/dev/null 2>&1 && chezmoi --version 2>/dev/null || echo "not installed"
    echo ""

    # Get managed files from chezmoi
    set -l managed_files (chezmoi managed)

    echo "Tools and Configuration:"
    echo ""

    # Shell Tools
    echo "## Shell Tools"
    __check_tool_with_configs "fish" ".config/fish/config.fish:.config/fish/aliases.fish" "$managed_files"
    __check_tool_with_configs "starship" ".config/starship.toml" "$managed_files"
    __check_tool_with_configs "wezterm" ".wezterm.lua" "$managed_files"

    echo ""
    echo "## File Utilities"
    __check_tool_with_configs "bat" ".config/bat/config" "$managed_files"
    __check_tool_with_configs "eza" "" "$managed_files"
    __check_tool_with_configs "fd" "" "$managed_files"
    __check_tool_with_configs "zoxide" "" "$managed_files"
    __check_tool_with_configs "fzf" "" "$managed_files"

    echo ""
    echo "## Git Tools"
    __check_tool_with_configs "git" ".gitconfig:.git_template/hooks/pre-commit" "$managed_files"
    __check_tool_with_configs "git-lfs" "" "$managed_files"
    __check_tool_with_configs "difft" "" "$managed_files"
    __check_tool_with_configs "gh" "" "$managed_files"
    # [[ if gt (len (glob ".config/glab-cli")) 0 -]] #
    __check_tool_with_configs "glab" ".config/glab-cli/config.yml:.config/glab-cli/aliases.yml" "$managed_files"
    # [[ end ]] #

    echo ""
    echo "## Development Tools"
    __check_tool_with_configs "nvim" ".config/nvim/init.lua" "$managed_files"
    __check_tool_with_configs "direnv" ".config/direnv/direnvrc" "$managed_files"
    __check_tool_with_configs "atuin" ".config/atuin/config.toml" "$managed_files"
    __check_tool_with_configs "uv" "" "$managed_files"
    __check_tool_with_configs "rustc" "" "$managed_files" "rustc --version"
    __check_tool_with_configs "cargo" "" "$managed_files" "cargo --version"

    echo ""
    echo "## Cloud Tools"
    __check_tool_with_configs "gcloud" "" "$managed_files"
    __check_tool_with_configs "op" "" "$managed_files"
    # [[ if eq .chezmoi.os "darwin" -]] #
    __check_tool_with_configs "aerospace" ".aerospace.toml" "$managed_files"
    # [[ end ]] #

    echo ""
    echo "Environment Variables:"
    # Get current fish theme
    set -l current_theme "Unknown"
    if type -q fish_config
        # Try to get the current theme
        set -l theme_output (fish_config theme show 2>/dev/null)
        if test $status -eq 0
            # Extract theme name from output
            set current_theme (string match -r 'theme: (.*)' -- "$theme_output" | string replace -r 'theme: (.*)' '$1')
        end
    end

    echo "  $success_icon EDITOR:         $EDITOR"
    echo "  $success_icon TERM:           $TERM"

    if command -v chezmoi >/dev/null 2>&1
        echo ""
        echo "Chezmoi Status:"
        chezmoi doctor
    end
end

function __check_tool_with_configs --description "Check tool installation and its configs"
    set -l tool_name $argv[1]
    set -l config_paths $argv[2]
    set -l managed_files $argv[3]
    set -l check_cmd $argv[4]

    set -l success_icon "✓"
    set -l error_icon "✗"

    # Check if tool is installed
    if test -z "$check_cmd"
        set check_cmd "$tool_name --version"
    end

    if command -v $tool_name >/dev/null 2>&1
        # Get version info
        set -l ver_info (eval $check_cmd 2>&1 | head -n 1)
        echo "  $success_icon $tool_name: $ver_info"
    else
        echo "  $error_icon $tool_name: not installed"
    end

    # Check config files
    if test -n "$config_paths"
        set -l config_list (string split ":" $config_paths)

        for cfg in $config_list
            set -l managed_status ""
            if contains $cfg $managed_files
                set managed_status "(managed by chezmoi)"
            end

            set -l file_path "$HOME/$cfg"
            if test -f $file_path
                echo "    $success_icon config: $cfg $managed_status"
            else
                echo "    $error_icon config: $cfg missing $managed_status"
            end
        end
    end
end


###########################################
# SSH AND AUTHENTICATION
###########################################

# 1Password SSH agent configuration is handled in conf.d/1password.fish.tmpl when available.

###########################################
# MISCELLANEOUS SETTINGS
###########################################

# Terminal title - show command name instead of username
function fish_title
    echo (status current-command)" "(basename $PWD)
end

# Suppress fish greeting
set fish_greeting

###########################################
# LOCAL CONFIGURATION
###########################################

# Source local config if it exists (not managed by chezmoi)
if test -f $HOME/.config/fish/local.config.fish
    source $HOME/.config/fish/local.config.fish
end
