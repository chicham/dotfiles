# chezmoi:template:left-delimiter="# [[" right-delimiter="]] #"

# Fish shell configuration file

###########################################
# HOMEBREW INITIALIZATION - MUST COME FIRST
###########################################

# [[ if eq .chezmoi.os "darwin" -]] #
# Initialize Homebrew first to ensure correct binary paths (macOS always has brew)
eval "$(brew shellenv)"
# [[ end ]] #

# Add ~/.local/bin to PATH if it exists
if test -d $HOME/.local/bin
    fish_add_path $HOME/.local/bin
end

###########################################
# ENVIRONMENT VARIABLES
###########################################

# Basic environment variables
set -gx EDITOR nvim
set -gx VISUAL nvim
# Use a widely supported terminal type
set -gx TERM xterm-256color

# WezTerm specific settings
if test "$TERM_PROGRAM" = WezTerm
    # Enable true color support and italics
    set -gx COLORTERM truecolor
end

# Set Git external diff tool if available
if type -q difft
    set -gx GIT_EXTERNAL_DIFF difft
end

###########################################
# PATH CONFIGURATION
###########################################

# Add fzf bin directory to PATH if it exists
if test -d $HOME/.fzf/bin
    fish_add_path $HOME/.fzf/bin
end

# Add Rust/Cargo to PATH if it exists
if test -d $HOME/.cargo/bin
    fish_add_path $HOME/.cargo/bin
end

# Google Cloud SDK configuration
# [[ if eq .chezmoi.os "darwin" -]] #
# Check for Google Cloud SDK in Homebrew locations on macOS
set -l brew_prefix (brew --prefix)
if test -d "$brew_prefix/Caskroom/google-cloud-sdk"
    fish_add_path "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"

    if test -f "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc"
        source "$brew_prefix/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc"
    end
end
# [[ else -]] #
# Linux Google Cloud SDK installation
if test -d $HOME/.local/google-cloud-sdk
    # Directly add the bin directory to PATH
    fish_add_path $HOME/.local/google-cloud-sdk/bin

    # Set up Python for Google Cloud SDK
    set -gx CLOUDSDK_PYTHON /usr/bin/python3

    # Source the completion file if it exists
    if test -f $HOME/.local/google-cloud-sdk/path.fish.inc
        source $HOME/.local/google-cloud-sdk/path.fish.inc
    end
end
# [[ end -]] #

# Add atuin (shell history) bin directory to PATH if it exists
if test -d $HOME/.atuin/bin
    fish_add_path $HOME/.atuin/bin
end

###########################################
# FZF CONFIGURATION
###########################################

# Setup fzf to use terminal colors with sensible defaults
set -gx FZF_DEFAULT_OPTS "--layout=reverse --border"

###########################################
# TOOL INITIALIZATION
###########################################

<<<<<<< HEAD
||||||| parent of 592fa4e (fix: resolve pre-commit errors in shell scripts and documentation)
# [[ if eq .chezmoi.os "darwin" -]] #
# On macOS, use Homebrew to install fonts if needed
function ensure_nerd_font_installed --argument font_name
    if is_brew_installed
        # Convert font name to homebrew cask name format
        set -l font_cask_name "font-"(string lower $font_name)"-nerd-font"

        # Check if the font is already installed via Homebrew
        if not brew list --cask $font_cask_name &>/dev/null
            echo "$font_name Nerd Font not installed. Installing via Homebrew..."
            brew install --cask $font_cask_name
        else
            echo "$font_name Nerd Font is already installed."
        end
    else
        echo "Homebrew is not installed. Cannot install $font_name Nerd Font."
    end
end

# Install FiraCode Nerd Font if needed
ensure_nerd_font_installed "fira-code"
# [[ else -]] #
# Explicitly source the Nerd Font functions to ensure they are available
if test -f $HOME/.config/fish/functions/install_nerd_font.fish
    source $HOME/.config/fish/functions/install_nerd_font.fish
end

# On Linux, use the install_nerd_font function
if functions -q is_nerd_font_installed
    if not is_nerd_font_installed "FiraCode"
        echo "FiraCode Nerd Font not installed. Installing..."
        install_nerd_font "FiraCode"
    end
end
# [[ end -]] #

=======
# [[ if eq .chezmoi.os "darwin" -]] #
# On macOS, use Homebrew to install fonts if needed
function ensure_nerd_font_installed --argument font_name
    if is_brew_installed
        # Convert font name to homebrew cask name format
        set -l font_cask_name "font-"(string lower $font_name)"-nerd-font"

        # Check if the font is already installed via Homebrew
        if not brew list --cask $font_cask_name &>/dev/null
            echo "$font_name Nerd Font not installed. Installing via Homebrew..."
            brew install --cask $font_cask_name
        else
            echo "$font_name Nerd Font is already installed."
        end
    else
        echo "Homebrew is not installed. Cannot install $font_name Nerd Font."
    end
end

# Install FiraCode Nerd Font if needed
ensure_nerd_font_installed "fira-code"
# [[ else -]] #
# Explicitly source the Nerd Font functions to ensure they are available
if test -f $HOME/.config/fish/functions/install_nerd_font.fish
    source $HOME/.config/fish/functions/install_nerd_font.fish
end

# On Linux, use the install_nerd_font function
if functions -q is_nerd_font_installed
    if not is_nerd_font_installed "FiraCode"
        echo "FiraCode Nerd Font not installed. Installing..."
        install_nerd_font "FiraCode"
    end
end
# [[ end -]] #

>>>>>>> 592fa4e (fix: resolve pre-commit errors in shell scripts and documentation)
# Initialize starship prompt if installed
if type -q starship
    starship init fish | source
end

# Initialize zoxide (smarter cd) if installed
if type -q zoxide
    zoxide init fish --cmd cd | source
end

# Initialize direnv if installed
if type -q direnv
    direnv hook fish | source
end

# Initialize chezmoi completions if installed
if type -q chezmoi
    chezmoi completion fish | source
end

# Initialize fzf if installed
if type -q fzf
    # Set up fzf key bindings but tell it not to bind Ctrl-r since atuin will use it
    set -x FZF_DISABLE_KEYBINDINGS 1
    fzf --fish | source

    # Manually bind fzf keys except for Ctrl-r
    bind \ct __fzf_search_current_dir
    bind \ec __fzf_search_history
    bind \eC '__fzf_cd --hidden'
end

# Initialize atuin (shell history) if installed - after fzf to override any bindings
if type -q atuin
    set -gx ATUIN_NOBIND true
    atuin init fish | source

    # bind to ctrl-r in normal and insert mode, add any other bindings you want here too
    bind \cr _atuin_search
    bind -M insert \cr _atuin_search
end

# Set up Docker completions if installed
if type -q docker
    # Add docker completions if they exist
    if test -d ~/.config/fish/completions
        and not test -f ~/.config/fish/completions/docker.fish
        # Docker provides completions via the CLI
        docker completion fish >~/.config/fish/completions/docker.fish 2>/dev/null
    end
end

###########################################
# ALIASES AND SHORTCUTS
###########################################

# Source aliases file
if test -f $HOME/.config/fish/aliases.fish
    source $HOME/.config/fish/aliases.fish
end

###########################################
# SSH AND AUTHENTICATION
###########################################

# 1Password SSH agent configuration is handled in conf.d/1password.fish.tmpl when available.

###########################################
# MISCELLANEOUS SETTINGS
###########################################

# Suppress fish greeting
set fish_greeting

###########################################
# LOCAL CONFIGURATION
###########################################

# Source local config if it exists (not managed by chezmoi)
if test -f $HOME/.config/fish/local.config.fish
    source $HOME/.config/fish/local.config.fish
end
