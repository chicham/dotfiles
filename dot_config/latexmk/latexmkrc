# =============================================================================
# COMPREHENSIVE LATEXMK CONFIGURATION FILE
# =============================================================================
#
# This .latexmkrc file provides a complete LaTeX compilation environment with
# support for modern LaTeX workflows including presentations, code highlighting,
# graphics externalization, and bibliography management.
#
# FEATURES AND CAPABILITIES:
# =============================================================================
#
# 1. LUALATEX ENGINE CONFIGURATION
#    - Uses LuaLaTeX as the primary PDF generation engine
#    - Provides superior Unicode and font support compared to pdfLaTeX
#    - Enables modern font technologies and Lua scripting capabilities
#    - Compatible with advanced packages like fontspec and polyglossia
#    - Configuration based on official CTAN sample for latexmk 4.51+
#
# 2. OUTPUT DIRECTORY MANAGEMENT
#    - All auxiliary and output files are stored in 'latex.out/' directory
#    - Keeps the main directory clean and organized
#    - Separates source files from generated compilation artifacts
#    - Makes version control cleaner by isolating build outputs
#    - Both $out_dir and $aux_dir point to same location for consistency
#
# 3. MINTED PACKAGE SUPPORT (Syntax Highlighting)
#    - Enables shell escape (-shell-escape) for Python Pygments integration
#    - Automatically passes output directory to minted package
#    - Optimizes recompilation by ignoring minted cache file changes in .aux
#    - Supports 300+ programming languages and markup formats
#    - Hash calculation ignores: minted cache lists, style files, and generated tokens
#
# 4. TIKZ EXTERNALIZATION SUPPORT (Graphics Optimization)
#    - Wraps all LaTeX engines (latex, pdflatex, lualatex, xelatex) with tikzlatex
#    - Automatically compiles TikZ figures as external PDF files
#    - Processes makefiles generated by TikZ externalize library
#    - Dramatically reduces compilation time for documents with complex graphics
#    - Ignores PDF metadata (creation/modification dates) to prevent false rebuilds
#
# 5. GLOSSARIES AND ACRONYMS SUPPORT
#    - Custom dependencies for .acn→.acr and .glo→.gls file processing
#    - Automatic invocation of makeglossaries with proper directory handling
#    - Supports multiple glossary types and cross-references
#    - Integrates seamlessly with glossaries and glossaries-extra packages
#
# 6. BIBLIOGRAPHY MANAGEMENT
#    - Configured for Biber backend (modern BibLaTeX processor)
#    - Superior Unicode support and sorting compared to BibTeX
#    - Advanced filtering, sorting, and citation style capabilities
#    - Better handling of complex bibliographies and multilingual sources
#
# 7. BEAMER PRESENTATION SUPPORT
#    - Handles Beamer-specific auxiliary files (.nav, .snm, .vrb)
#    - Supports navigation structures and overlay specifications
#    - Compatible with animation and multimedia features
#    - Optimized cleanup for presentation-specific temporary files
#
# 8. ENHANCED CLEANUP SYSTEM
#    - Comprehensive cleanup of auxiliary files with pattern matching
#    - Removes: glossary files, beamer files, minted cache, TikZ figures
#    - Handles converted graphics files (*-eps-converted-to.pdf)
#    - Custom cleanup1 subroutine supports wildcards and %R patterns
#    - Automatically removes temporary build artifacts
#
# 9. COMPILATION OPTIMIZATION
#    - Hash-based change detection prevents unnecessary recompilation
#    - Ignores timestamp changes in PDF metadata and PostScript headers
#    - Intelligent handling of minted cache to avoid rebuild loops
#    - Configurable iteration limits for cross-reference resolution
#
# 10. DEVELOPMENT WORKFLOW INTEGRATION
#     - TEXINPUTS path includes current directory for modular projects
#     - Performance timing shows compilation duration
#     - Maximum 5 iterations for cross-reference resolution
#     - Compatible with continuous compilation (-pvc mode)
#
# COMPILATION PROCESS FLOW:
# =============================================================================
#
# 1. latexmk reads this configuration file
# 2. Sets up LuaLaTeX as primary engine with shell escape
# 3. Creates latex.out/ directory for all outputs
# 4. For each .tex file:
#    a. Runs tikzlatex wrapper (which calls lualatex with minted support)
#    b. Processes any TikZ makefiles for figure externalization
#    c. Runs makeglossaries if .glo/.acn files are found
#    d. Runs biber if .bcf file indicates bibliography processing needed
#    e. Repeats until cross-references stabilize (max 5 iterations)
# 5. All outputs (.pdf, .aux, .log, etc.) are placed in latex.out/
#
# USAGE INSTRUCTIONS:
# =============================================================================
#
# Basic compilation:
#   latexmk document.tex
#
# Force full recompilation:
#   latexmk -g document.tex
#
# Clean auxiliary files only:
#   latexmk -c document.tex
#
# Clean all generated files including PDF:
#   latexmk -C document.tex
#
# Continuous compilation (watch mode):
#   latexmk -pvc document.tex
#
# PACKAGE DEPENDENCIES:
# =============================================================================
#
# This configuration optimally supports:
# - minted (requires Python + Pygments installed)
# - tikz with externalize library
# - glossaries or glossaries-extra
# - biblatex with biber backend
# - beamer document class
# - fontspec (automatic with LuaLaTeX)
#
# SYSTEM REQUIREMENTS:
# =============================================================================
#
# - latexmk 4.51+ (for LuaLaTeX support)
# - TeX Live 2020+ or MiKTeX 2020+
# - Python with Pygments (for minted)
# - make utility (for TikZ externalization)
# - Perl 5.8+ (usually included with LaTeX distribution)
#
# =============================================================================

# LuaLaTeX Engine Configuration
# Uses official CTAN method for latexmk 4.51+
$pdf_mode = 4;                      # Generate PDF directly
$postscript_mode = $dvi_mode = 0;   # Disable PS and DVI modes
$pdflatex = 'lualatex -synctex=1 -interaction=nonstopmode -file-line-error %O %S';

# Output Directory Management
# All build artifacts go to latex.out/ for clean project structure
$out_dir = 'latex.out';
$aux_dir = 'latex.out';

# Minted Package Support with Shell Escape
# Enables Python Pygments for syntax highlighting
&set_tex_cmds( '-shell-escape %O '
        . '\'\PassOptionsToPackage{outputdir={%Y}}{minted}\input{%S}\''
        );

# Optimization: Ignore Minted Cache Changes in Hash Calculation
# Prevents unnecessary recompilation when minted cache files change
$hash_calc_ignore_pattern{aux} = '^\\\\gdef\\\\minted@oldcachelist\{,'.
                                 '|^\s*default\.pygstyle,'.
                                 '|^\s*[[:xdigit:]]+\.pygtex';

# TikZ Externalization Support
# Wraps all LaTeX engines to handle TikZ figure compilation
$latex    = 'internal tikzlatex latex    %B %O %S';
$pdflatex = 'internal tikzlatex pdflatex %B %O %S';
$lualatex = 'internal tikzlatex lualatex %B %O %S';
$xelatex  = 'internal tikzlatex xelatex  %B %O %S';

# Ignore PDF/PS Metadata for TikZ Externalization
# Prevents rebuilds due to timestamp differences in externalized figures
$hash_calc_ignore_pattern{'pdf'} = '^(/CreationDate|/ModDate|/ID)';
$hash_calc_ignore_pattern{'ps'} = '^%%CreationDate';

# TikZ Externalization Handler
# Runs LaTeX engine and processes any generated makefiles
sub tikzlatex {
    my $engine = shift;
    my $base = shift;
    my @args = @_;

    # Run the primary LaTeX engine
    my $ret = system($engine, @args);
    return $ret if $ret != 0;

    # Process TikZ makefile if it exists
    if (-f "$base.makefile") {
        system("make", "-f", "$base.makefile");
    }

    return 0;
}

# Glossaries Support (Official CTAN Configuration)
# Handles acronyms (.acn→.acr) and glossaries (.glo→.gls)
add_cus_dep( 'acn', 'acr', 0, 'makeglossaries' );
add_cus_dep( 'glo', 'gls', 0, 'makeglossaries' );

sub makeglossaries {
    my ($base_name, $path) = fileparse( $_[0] );
    return system "makeglossaries", "-d", $path, $base_name;
}

# Biber Bibliography Processing
# Modern Unicode-aware bibliography processor for biblatex
$biber = 'biber %O %B';

# Comprehensive Cleanup Extensions
# Organized by feature for clarity
$clean_ext .= " acr acn alg glo gls glg";                                      # Glossaries
$clean_ext .= " nav snm vrb figlist makefile pyg synctex.gz xdv run.xml";     # Beamer + Minted
$clean_ext .= " %R.figlist %R-figure* %R.makefile fls.tmp";                   # TikZ Externalization
$clean_ext .= " *-eps-converted-to.pdf";                                      # Graphics Conversion

# Enhanced Cleanup with Pattern Matching
# Supports wildcards and %R filename substitution
sub cleanup1 {
    my $dir = fix_pattern( shift );

    foreach (@_) {
        (my $name = (/%R/ || /[\*\.\?]/) ? $_ : "%R.$_") =~ s/%R/$dir$root_filename/;
        unlink_or_move( glob( "$name" ) );
    }
}

# Development Environment Settings
ensure_path('TEXINPUTS', './/:');    # Include current directory in TeX search path
$max_repeat = 5;                     # Maximum iterations for cross-reference resolution
$show_time = 1;                      # Display compilation timing information
