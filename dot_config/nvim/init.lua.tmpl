-- chezmoi:template:left-delimiter="-- [[" right-delimiter="]] --"
-- Neovim Configuration
-- This file serves as the main entry point for your Neovim setup.
-- It bootstraps the plugin manager, sets fundamental editor options,
-- defines global keybindings, and configures core plugins.
--
-- Fast, focused configuration for efficient editing

--------------------------------------------------------------------------------
-- PLUGIN MANAGER BOOTSTRAP (lazy.nvim)
--------------------------------------------------------------------------------
-- lazy.nvim is a fast and powerful plugin manager for Neovim.
-- This section ensures lazy.nvim is installed and available.
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
	local lazyrepo = "https://github.com/folke/lazy.nvim.git"
	local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
	if vim.v.shell_error ~= 0 then
		error("Error cloning lazy.nvim:\n" .. out)
	end
end
vim.opt.rtp:prepend(lazypath)

--------------------------------------------------------------------------------
-- GLOBAL SETTINGS
--------------------------------------------------------------------------------
-- Set leader key before loading plugins. The leader key is a prefix for custom keybindings.
vim.g.mapleader = " "
vim.g.maplocalleader = " "

-- Set to true if you have a Nerd Font installed and selected in the terminal.
-- Nerd Fonts provide additional icons and glyphs for various plugins (e.g., lualine, nvim-tree).
vim.g.have_nerd_font = true


--------------------------------------------------------------------------------
-- BASIC SETTINGS
--------------------------------------------------------------------------------
-- Make line numbers default (absolute line numbers)
vim.opt.number = true
-- Show relative line numbers (useful for motions like 5j, 10k)
vim.opt.relativenumber = true

-- Enable mouse mode for easier navigation and resizing
vim.opt.mouse = "a"

-- Don't show the mode in the command line, as it's already in the status line (e.g., lualine)
vim.opt.showmode = false

-- Sync clipboard between OS and Neovim. This allows you to copy/paste to/from external applications.
vim.schedule(function()
	vim.opt.clipboard = "unnamedplus"
end)

-- Enable break indent: preserves indentation when wrapping lines
vim.opt.breakindent = true

-- Save undo history to a file, allowing undo/redo even after closing Neovim
vim.opt.undofile = true

-- Case-insensitive searching UNLESS \C is used or one or more capital letters are in the search term
vim.opt.ignorecase = true
vim.opt.smartcase = true

-- Always show the signcolumn, preventing text from jumping when diagnostics or git signs appear
vim.opt.signcolumn = "yes"

-- Decrease update time for plugins and UI, making Neovim feel more responsive
vim.opt.updatetime = 250

-- Decrease mapped sequence wait time, making keybindings feel snappier
vim.opt.timeoutlen = 300

-- Configure how new splits should be opened: vertical splits to the right, horizontal splits below
vim.opt.splitright = true
vim.opt.splitbelow = true

-- Sets how neovim will display certain whitespace characters in the editor
vim.opt.list = true
vim.opt.listchars = { tab = "» ", trail = "·", nbsp = "␣" }

-- Preview substitutions live, as you type! (e.g., :s/old/new/gc)
vim.opt.inccommand = "split"

-- Show which line your cursor is on
vim.opt.cursorline = true

-- Minimal number of screen lines to keep above and below the cursor when scrolling
vim.opt.scrolloff = 10

-- Set completeopt to have a better completion experience with nvim-cmp
vim.opt.completeopt = "menu,menuone,noselect,noinsert"

-- Command Line settings
vim.opt.cmdheight = 1 -- Command line height
vim.opt.wildmenu = true -- Enable wildmenu for command-line completion
vim.opt.wildmode = "longest:full,full" -- Command line completion behavior

-- Use ripgrep as grepprg if available for faster and more powerful grep searches
if vim.fn.executable("rg") == 1 then
	vim.opt.grepprg = "rg --vimgrep --smart-case --follow --hidden --glob '!.git'"
end

-- Wrap behavior: wrap long lines and break them at word boundaries
vim.opt.wrap = true
vim.opt.linebreak = true
-- Diff options for better visual diffs
vim.opt.diffopt = "filler,internal,algorithm:histogram,indent-heuristic"

-- File/Buffer Handling
vim.opt.hidden = true -- Hide buffers when not in use instead of closing them
vim.opt.swapfile = false -- Disable swap files
vim.opt.backup = false -- Disable backup files
vim.opt.spell = false -- Disable spell checking by default
vim.opt.spelllang = "en_us" -- Default spell language

-- Appearance
vim.opt.fillchars:append({ eob = " " }) -- Don't show ~ for empty lines at the end of the buffer
vim.opt.termguicolors = true -- Enable true colors in the terminal

-- Indentation settings
vim.opt.expandtab = true -- Use spaces instead of tabs
vim.opt.shiftwidth = 2 -- Number of spaces to use for autoindent and shift commands
vim.opt.tabstop = 2 -- Number of spaces a tab character represents
vim.opt.softtabstop = 2 -- Number of spaces a tab character represents when editing
vim.opt.smartindent = true -- Smart autoindenting


--------------------------------------------------------------------------------
-- KEY MAPPINGS
--------------------------------------------------------------------------------

-- Clear highlights on search when pressing <Esc> in normal mode
vim.keymap.set("n", "<Esc>", "<cmd>nohlsearch<CR>")

-- Diagnostic keymaps
local diagnostic_enabled = true

-- Function to toggle diagnostics
local function toggle_diagnostics()
	diagnostic_enabled = not diagnostic_enabled
	vim.diagnostic.enable(diagnostic_enabled)
end

vim.keymap.set("n", "<leader>dt", toggle_diagnostics, {
	desc = "Toggle diagnostics",
	silent = true,
	noremap = true,
})

-- Exit terminal mode in the builtin terminal
vim.keymap.set("t", "<Esc><Esc>", "<C-\\><C-n>", { desc = "Exit terminal mode" })

-- Windows management
vim.keymap.set("n", "<leader>ww", '"<C-w><C-w> | zt"', { expr = true, silent = true })
vim.keymap.set("n", "<leader>wv", '"<C-w>v | zt"', { expr = true, silent = true })
vim.keymap.set("n", "<leader>wh", '"<C-W>s | zt"', { expr = true, silent = true })
vim.keymap.set("n", "<leader>wc", "<C-w>c")
vim.keymap.set("n", "<leader>w=", "<C-w>=")
vim.keymap.set("n", "<leader>wr", "<C-w>r")
vim.keymap.set("n", "<leader>wo", "<C-w>o")
vim.keymap.set("n", "<leader><Up>", "<C-w><Up>")
vim.keymap.set("n", "<leader><Down>", "<C-w><Down>")
vim.keymap.set("n", "<leader><Right>", "<C-w><Right>")
vim.keymap.set("n", "<leader><Left>", "<C-w><Left>")

-- Better window navigation
vim.keymap.set("n", "<C-h>", "<C-w>h", { desc = "Move focus to the left window" })
vim.keymap.set("n", "<C-j>", "<C-w>j", { desc = "Move focus to the lower window" })
vim.keymap.set("n", "<C-k>", "<C-w>k", { desc = "Move focus to the upper window" })
vim.keymap.set("n", "<C-l>", "<C-w>l", { desc = "Move focus to the right window" })

-- Navigate buffers
vim.keymap.set("n", "<S-l>", ":bnext<CR>", { silent = true })
vim.keymap.set("n", "<S-h>", ":bprevious<CR>", { silent = true })

-- Better movement on wrapped lines
vim.keymap.set("n", "k", "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set("n", "j", "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- Macro helpers
vim.keymap.set("n", "Q", "@@")
vim.keymap.set("v", "Q", ":normal @@")

-- Write buffer
vim.keymap.set("n", "W", ":w<cr>", { silent = true })

-- Utility shortcuts
vim.keymap.set("n", "<leader>w", ":w<CR>", { silent = true }) -- Quick save
vim.keymap.set("n", "<leader>q", ":q<CR>", { silent = true }) -- Quick quit
vim.keymap.set("n", "<leader>Q", ":qa!<CR>", { silent = true }) -- Force quit all

-- Tab controls
vim.keymap.set("n", "<leader>tn", ":tabnew<CR>", { silent = true }) -- New tab
vim.keymap.set("n", "<leader>tc", ":tabclose<CR>", { silent = true }) -- Close tab
vim.keymap.set("n", "<leader>to", ":tabonly<CR>", { silent = true }) -- Close other tabs

-- Visual mode indent fix
vim.keymap.set("v", "<", "<gv")
vim.keymap.set("v", ">", ">gv")

-- Move text up and down
vim.keymap.set("v", "J", ":m .+1<CR>==", { silent = true })
vim.keymap.set("v", "K", ":m .-2<CR>==", { silent = true })
vim.keymap.set("v", "p", '"_dP', { silent = true }) -- Don't lose yanked text when pasting over selection

-- Keep cursor centered when jumping
vim.keymap.set("n", "n", "nzzzv", { silent = true })
vim.keymap.set("n", "N", "Nzzzv", { silent = true })
vim.keymap.set("n", "J", "mzJ`z", { silent = true })

-- Miscellaneous keymaps
vim.keymap.set("n", "<leader>pp", ":let @+ = join([expand('%:p'), line('.')], ':')<cr>", { silent = true })
vim.keymap.set("n", "0", "^")

-- Quickly escape to normal mode
vim.keymap.set("i", "jk", "<ESC>", { silent = true })
vim.keymap.set("i", "kj", "<ESC>", { silent = true })

-- Basic Autocommands
-- Highlight when yanking (copying) text
vim.api.nvim_create_autocmd("TextYankPost", {
	desc = "Highlight when yanking (copying) text",
	group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
	callback = function()
		vim.highlight.on_yank()
	end,
})

-- Remember cursor position when reopening files
vim.api.nvim_create_autocmd("BufReadPost", {
	pattern = "*",
	callback = function()
		local line = vim.fn.line
		if line("'\"") > 0 and line("'\"") <= line("$") then
			vim.cmd('normal! g`"')
		end
	end,
})

-- Auto-resize panes on terminal resize
vim.api.nvim_create_autocmd("VimResized", {
	pattern = "*",
	command = "tabdo wincmd =",
})

-- Ensure wrap is always on for all buffers
vim.api.nvim_create_autocmd({ "BufReadPost", "BufNewFile" }, {
	pattern = "*",
	callback = function()
		vim.wo.wrap = true
	end,
})

--------------------------------------------------------------------------------
-- PLUGIN CONFIGURATION
--------------------------------------------------------------------------------
-- This section defines and configures all Neovim plugins using lazy.nvim.
-- Plugins are organized by category for better readability and management.

-- Plugin definitions
-- lazy.nvim's setup function loads and configures all specified plugins.
-- The `ui` table customizes the appearance of lazy.nvim's interface.
require("lazy").setup({
	-- Catppuccin Theme (main theme)
	{
		"catppuccin/nvim",
		name = "catppuccin",
		priority = 1000,
		lazy = false,
		config = function()
			-- Apply the colorscheme immediately
			vim.cmd.colorscheme("catppuccin")
		end,
	},

	-- Vim plugins
	"tpope/vim-sleuth", -- Detect tabstop and shiftwidth automatically
	"tpope/vim-repeat",
	"tummetott/unimpaired.nvim",
	{ "tpope/vim-sensible" },
	{ "tpope/vim-abolish" },
	{ "tpope/vim-eunuch" },

	-- Git integration
	{
		"lewis6991/gitsigns.nvim",
		opts = {
			signs = {
				add = { text = "+" },
				change = { text = "~" },
				delete = { text = "_" },
				topdelete = { text = "‾" },
				changedelete = { text = "~" },
			},
		},
		keys = function()
			local gitsigns = require("gitsigns")
			return {
				{ "<leader>gs", gitsigns.stage_hunk, desc = "Stage hunk" },
				{
					"<leader>gs",
					function()
						gitsigns.stage_hunk({ vim.fn.line("."), vim.fn.line("v") })
					end,
					mode = "v",
					desc = "Stage hunk",
				},
				{ "<leader>gr", gitsigns.reset_hunk, desc = "Reset hunk" },
				{
					"<leader>gr",
					function()
						gitsigns.reset_hunk({ vim.fn.line("."), vim.fn.line("v") })
					end,
					mode = "v",
					desc = "Reset hunk",
				},
				{ "<leader>gu", gitsigns.undo_stage_hunk, desc = "Undo staged hunk" },
				{ "<leader>gp", gitsigns.preview_hunk, desc = "Preview hunk in floating window" },
				{
					"<leader>gb",
					function()
						gitsigns.blame_line({ full = true })
					end,
					desc = "Git blame on the current line",
				},
				{ "<leader>gB", gitsigns.toggle_current_line_blame, desc = "Toggle git blame on current line" },
				{ "ah", mode = { "o", "x" }, ":<C-U>Gitsigns select_hunk<CR>" },
			}
		end,
	},

	-- Which-key for keybinding help
	-- {
	-- 	"folke/which-key.nvim",
	-- 	event = "VimEnter",
	-- 	config = function()
	-- 		require("which-key").setup({
	-- 			icons = {
	-- 				mappings = vim.g.have_nerd_font,
	-- 				keys = vim.g.have_nerd_font and {} or {
	-- 					Up = "<Up> ",
	-- 					Down = "<Down> ",
	-- 					Left = "<Left> ",
	-- 					Right = "<Right> ",
	-- 					C = "<C-…> ",
	-- 					M = "<M-…> ",
	-- 					D = "<D-…> ",
	-- 					S = "<S-…> ",
	-- 					CR = "<CR> ",
	-- 					Esc = "<Esc> ",
	-- 					ScrollWheelDown = "<ScrollWheelDown> ",
	-- 					ScrollWheelUp = "<ScrollWheelUp> ",
	-- 					NL = "<NL> ",
	-- 					BS = "<BS> ",
	-- 					Space = "<Space> ",
	-- 					Tab = "<Tab> ",
	-- 					F1 = "<F1>",
	-- 					F2 = "<F2>",
	-- 					F3 = "<F3>",
	-- 					F4 = "<F4>",
	-- 					F5 = "<F5>",
	-- 					F6 = "<F6>",
	-- 					F7 = "<F7>",
	-- 					F8 = "<F8>",
	-- 					F9 = "<F9>",
	-- 					F10 = "<F10>",
	-- 					F11 = "<F11>",
	-- 					F12 = "<F12>",
	-- 				},
	-- 			},
	-- 		})
	--
	-- 		-- Document existing key chains
	-- 		require("which-key").add({
	-- 			{ "<leader>g", group = "[G]it", mode = { "n", "v" } },
	-- 			{ "<leader>c", group = "[C]ode", mode = { "n", "v" } },
	-- 			{ "<leader>d", group = "[D]ebug", mode = { "n", "v" } },
	-- 			{ "<leader>w", group = "[W]indow", mode = { "n", "v" } },
	-- 		})
	-- 	end,
	-- },

	-- Lua LSP configuration
	{
		"folke/lazydev.nvim",
		ft = "lua",
		opts = {
			library = {
				{ path = "luvit-meta/library", words = { "vim%.uv" } },
			},
		},
	},
	{ "Bilal2453/luvit-meta", lazy = true },

	-- Tree-sitter configuration
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		dependencies = {
			"nvim-treesitter/nvim-treesitter-textobjects",
			"RRethy/nvim-treesitter-textsubjects",
			"andymass/vim-matchup",
		},
		config = function()
			require("nvim-treesitter.configs").setup({
				ensure_installed = {
					"bash",
					"c",
					"lua",
					"vim",
					"vimdoc",
					"query",
					"javascript",
					"typescript",
					"html",
					"css",
					"json",
					"yaml",
					"python",
					"rust",
					"go",
					"markdown",
					"markdown_inline",
					"diff",
					"luadoc",
					"latex",
					"comment",
					"fish",
					"proto",
					"rst",
					"toml",
					"dockerfile",
					"git_config",
					"git_rebase",
					"gitattributes",
					"gitcommit",
					"gitignore",
				},
				ignore_install = { "org" },
				sync_install = false,
				auto_install = true,
				highlight = {
					enable = true,
					additional_vim_regex_highlighting = { "ruby" },
				},
				indent = { enable = true, disable = { "ruby" } },
				textobjects = {
					select = {
						enable = true,
						lookahead = true,
						keymaps = {
							["af"] = "@function.outer",
							["if"] = "@function.inner",
							["ac"] = "@class.outer",
							["ic"] = "@class.inner",
							["aa"] = "@parameter.outer",
							["ia"] = "@parameter.inner",
							["ai"] = "@indent.outer",
							["ii"] = "@indent.inner",
							-- Easy-to-remember mappings for code blocks
							["a}"] = "@block.outer",
							["i}"] = "@block.inner",
						},
					},
					move = {
						enable = true,
						set_jumps = true,
						goto_next_start = {
							["]f"] = "@function.outer",
							["]c"] = "@class.outer",
							["]a"] = "@parameter.outer",
							["]i"] = "@conditional.outer",
							["]l"] = "@loop.outer",
							["]b"] = "@block.outer",
						},
						goto_next_end = {
							["]F"] = "@function.outer",
							["]C"] = "@class.outer",
							["]A"] = "@parameter.outer",
							["]I"] = "@conditional.outer",
							["]L"] = "@loop.outer",
							["]B"] = "@block.outer",
						},
						goto_previous_start = {
							["[f"] = "@function.outer",
							["[c"] = "@class.outer",
							["[a"] = "@parameter.outer",
							["[i"] = "@conditional.outer",
							["[l"] = "@loop.outer",
							["[b"] = "@block.outer",
						},
						goto_previous_end = {
							["[F"] = "@function.outer",
							["[C"] = "@class.outer",
							["[A"] = "@parameter.outer",
							["[I"] = "@conditional.outer",
							["[L"] = "@loop.outer",
							["[B"] = "@block.outer",
						},
					},
				},
				textsubjects = {
					enable = true,
					prev_selection = "<bs>",
					keymaps = {
						["<cr>"] = "textsubjects-smart",
						["a;"] = "textsubjects-container-outer",
						["i;"] = "textsubjects-container-inner",
					},
				},
				incremental_selection = {
					enable = true,
					keymaps = {
						init_selection = "<C-space>",
						node_incremental = "<C-space>",
						scope_incremental = false,
						node_decremental = "<bs>",
					},
				},
				matchup = {
					enable = true,
					enable_quotes = true,
					disable_virtual_text = true,
				},
			})
		end,
	},

	-- Split/join code blocks
	{
		"Wansmer/treesj",
		dependencies = { "nvim-treesitter/nvim-treesitter" },
		config = function()
			require("treesj").setup({
				use_default_keymaps = false,
			})
			vim.keymap.set("n", "<leader>j", ":TSJToggle<CR>", { silent = true })
		end,
	},

	-- Plenary - utilities library
	{ "nvim-lua/plenary.nvim" },

	-- Chezmoi integration
	{
		"andre-kotake/nvim-chezmoi",
		dependencies = {
			"nvim-lua/plenary.nvim",
		},
		config = function()
			require("nvim-chezmoi").setup({
				edit = {
					apply_on_save = "never", -- Options: "auto", "confirm", "never"
				},
				window = {
					execute_template = {
						relative = "editor",
						style = "minimal",
						border = "single",
					},
				},
			})
		end,
	},

	-- Code formatting
	{
		"stevearc/conform.nvim",
		-- event = { 'BufWritePre' },
		cmd = { "ConformInfo" },
		keys = {
			{
				"<leader>fo", -- codespell:ignore fo
				function()
					require("conform").format({ async = true, lsp_fallback = true })
				end,
				mode = "",
				desc = "[F]ormat buffer",
			},
		},
		opts = {
			notify_on_error = false,
			-- format_on_save = function(bufnr)
			--   -- Disable "format_on_save lsp_fallback" for languages that don't
			--   -- have a well standardized coding style. You can add additional
			--   -- languages here or re-enable it for the disabled ones.
			--   local disable_filetypes = { c = true, cpp = true }
			--   return {
			--     timeout_ms = 500,
			--     lsp_fallback = not disable_filetypes[vim.bo[bufnr].filetype],
			--   }
			-- end,
			formatters_by_ft = {
				lua = { "stylua" },
				python = { "ruff_format", "ruff_organize_imports" },
				fish = { "fish_indent" },
				sh = { "shfmt" },
				-- Conform can also run multiple formatters sequentially
				-- python = { "isort", "black" },
				--
				-- You can use 'stop_after_first' to run the first available formatter from the list
				-- javascript = { "prettierd", "prettier", stop_after_first = true },
			},
		},
	},

	-- Autocompletion with cmdline completion
	{
		"hrsh7th/nvim-cmp",
		dependencies = {
			"hrsh7th/cmp-nvim-lsp",
			"hrsh7th/cmp-buffer",
			"hrsh7th/cmp-path",
			"hrsh7th/cmp-cmdline",
			"L3MON4D3/LuaSnip",
			"saadparwaiz1/cmp_luasnip",
			"rafamadriz/friendly-snippets",
		},
		config = function()
			local cmp = require("cmp")
			local luasnip = require("luasnip")

			-- Configure LuaSnip for visual selection
			luasnip.config.setup({
				store_selection_keys = "<Tab>",
			})

			-- Load friendly snippets
			require("luasnip.loaders.from_vscode").lazy_load()
			require("luasnip.loaders.from_lua").load({ paths = "~/.snippets/lua/luasnip_snippets/" })

			cmp.setup({
				snippet = {
					expand = function(args)
						luasnip.lsp_expand(args.body)
					end,
				},
				experimental = {
					ghost_text = true,
				},
				mapping = cmp.mapping.preset.insert({
					-- Select the [n]ext item
					["<C-n>"] = cmp.mapping.select_next_item(),
					-- Select the [p]revious item
					["<C-p>"] = cmp.mapping.select_prev_item(),
					-- Scroll the documentation window
					["<C-b>"] = cmp.mapping.scroll_docs(-4),
					["<C-f>"] = cmp.mapping.scroll_docs(4),
					-- Accept the completion
					["<C-y>"] = cmp.mapping.confirm({ select = true }),
					["<CR>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							if luasnip.expandable() then
								luasnip.expand()
							else
								cmp.confirm({
									select = false,
								})
							end
						else
							fallback()
						end
					end),
					["<Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_next_item()
						elseif luasnip.expand_or_locally_jumpable() then
							luasnip.expand_or_jump()
						else
							fallback()
						end
					end, { "i", "s" }),
					["<S-Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_prev_item()
						elseif luasnip.locally_jumpable(-1) then
							luasnip.jump(-1)
						else
							fallback()
						end
					end, { "i", "s" }),

					-- Manually trigger a completion from nvim-cmp
					["<C-Space>"] = cmp.mapping.complete({}),

					-- Snippet navigation
					["<C-l>"] = cmp.mapping(function()
						if luasnip.expand_or_locally_jumpable() then
							luasnip.expand_or_jump()
						end
					end, { "i", "s" }),
					["<C-h>"] = cmp.mapping(function()
						if luasnip.locally_jumpable(-1) then
							luasnip.jump(-1)
						end
					end, { "i", "s" }),
				}),
				sources = cmp.config.sources({
					{
						name = "lazydev",
						group_index = 0,
					},
					{ name = "nvim_lsp", priority = 1000 },
					{ name = "vimtex", priority = 800 },
					{ name = "luasnip", priority = 750 },
					{ name = "copilot", priority = 700 },
					{ name = "buffer", priority = 500, keyword_length = 3 },
					{ name = "path", priority = 250 },
				}),
				window = {
					documentation = cmp.config.window.bordered(),
				},
			})

			-- Set up specific configurations for cmdline
			cmp.setup.cmdline(":", {
				mapping = cmp.mapping.preset.cmdline(),
				sources = cmp.config.sources({
					{ name = "path" },
					{ name = "cmdline" },
				}),
			})

			-- Set up specific configurations for search
			cmp.setup.cmdline("/", {
				mapping = cmp.mapping.preset.cmdline(),
				sources = {
					{ name = "buffer" },
				},
			})
		end,
	},

	-- LSP Configuration
	{
		-- Main LSP Configuration
		"neovim/nvim-lspconfig",
		dependencies = {
			-- Automatically install LSPs and related tools to stdpath for Neovim
			{ "williamboman/mason.nvim", config = true }, -- NOTE: Must be loaded before dependants
			"williamboman/mason-lspconfig.nvim",
			"WhoIsSethDaniel/mason-tool-installer.nvim",
			"hrsh7th/cmp-nvim-lsp",
		},
		config = function()
			--  This function gets run when an LSP attaches to a particular buffer.
			vim.api.nvim_create_autocmd("LspAttach", {
				group = vim.api.nvim_create_augroup("kickstart-lsp-attach", { clear = true }),
				callback = function(event)
					local map = function(keys, func, desc)
						vim.keymap.set("n", keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
					end

					-- LSP keymaps (gd, gr, gI delegated to fzf-lua)
					map("K", vim.lsp.buf.hover, "Hover Documentation")
					map("<C-k>", vim.lsp.buf.signature_help, "Signature Documentation")
					map("<leader>cr", vim.lsp.buf.rename, "[C]ode [R]ename")
					map("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
					map("<space>f", function()
						vim.lsp.buf.format({ async = true })
					end, "Format")

					-- Better diagnostic navigation
					vim.keymap.set('n', '[d', function()
						vim.diagnostic.goto_prev({ severity = vim.diagnostic.severity.ERROR })
					end, { desc = 'Previous error' })

					vim.keymap.set('n', ']d', function()
						vim.diagnostic.goto_next({ severity = vim.diagnostic.severity.ERROR })
					end, { desc = 'Next error' })

					vim.keymap.set('n', '[w', function()
						vim.diagnostic.goto_prev({ severity = vim.diagnostic.severity.WARN })
					end, { desc = 'Previous warning' })

					vim.keymap.set('n', ']w', function()
						vim.diagnostic.goto_next({ severity = vim.diagnostic.severity.WARN })
					end, { desc = 'Next warning' })

					-- The following two autocommands are used to highlight references of the
					-- word under your cursor when your cursor rests there for a little while.
					local client = vim.lsp.get_client_by_id(event.data.client_id)
					if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight) then
						local highlight_augroup =
							vim.api.nvim_create_augroup("kickstart-lsp-highlight", { clear = false })
						vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
							buffer = event.buf,
							group = highlight_augroup,
							callback = vim.lsp.buf.document_highlight,
						})

						vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
							buffer = event.buf,
							group = highlight_augroup,
							callback = vim.lsp.buf.clear_references,
						})

						vim.api.nvim_create_autocmd("LspDetach", {
							group = vim.api.nvim_create_augroup("kickstart-lsp-detach", { clear = true }),
							callback = function(event2)
								vim.lsp.buf.clear_references()
								vim.api.nvim_clear_autocmds({ group = "kickstart-lsp-highlight", buffer = event2.buf })
							end,
						})
					end

					-- Inlay hints toggle keymap
					if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
						map("<leader>ch", function()
							vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled({ bufnr = event.buf }))
						end, "Code Toggle Inlay [H]ints")
					end
				end,
			})

			local capabilities = vim.lsp.protocol.make_client_capabilities()
			capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())

			-- Define servers
			local servers = {
				lua_ls = {
					settings = {
						Lua = {
							diagnostics = {
								globals = { "vim" },
							},
							workspace = {
								library = vim.api.nvim_get_runtime_file("", true),
								checkThirdParty = false,
							},
							telemetry = {
								enable = false,
							},
							completion = {
								callSnippet = "Replace",
							},
						},
					},
				},
				rust_analyzer = {},
				texlab = {
					settings = {
						texlab = {
							build = {
								onSave = false,
							},
							forwardSearch = {
								executable = "skim",
								args = { "-g", "%l", "%f" },
							},
						},
					},
				},
			}

			-- [[ if eq .chezmoi.os "darwin" ]] --
			-- Additional LSPs for macOS
			servers.bashls = {}
			servers.clangd = {}
			servers.cssls = {}
			servers.html = {}
			servers.jsonls = {}
			-- [[ end ]] --

			-- Ensure Mason is set up
			require("mason").setup({
				ui = {
					border = "rounded",
					icons = {
						package_installed = "✓",
						package_pending = "➜",
						package_uninstalled = "✗",
					},
				},
			})

			-- Set up servers using mason
			local ensure_installed = vim.tbl_keys(servers or {})
			vim.list_extend(ensure_installed, {
				"stylua", -- Used to format Lua code
				"shellcheck",
			})
			require("mason-tool-installer").setup({ ensure_installed = ensure_installed })

			require("mason-lspconfig").setup({
				ensure_installed = {
					"lua_ls",
					"texlab",
					-- [[ if eq .chezmoi.os "darwin" ]] --
					-- Additional LSPs for macOS
					"bashls",
					"clangd",
					"cssls",
					"html",
					"jsonls",
					-- [[ end ]] --
				},
				automatic_installation = true,
				handlers = {
					function(server_name)
						local server = servers[server_name] or {}
						server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
						require("lspconfig")[server_name].setup(server)
					end,
				},
			})
		end,
	},

  -- LSP Configuration
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      "mason-org/mason.nvim",
      "williamboman/mason-lspconfig.nvim",
    },
    config = function()
      local lspconfig = require("lspconfig")
      local capabilities = require("cmp_nvim_lsp").default_capabilities()

      -- Set up key mappings for LSP functionality
      vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(ev)
          local opts = { buffer = ev.buf, silent = true }

          -- Basic mappings
          vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
          vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
          vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
          vim.keymap.set("n", "<space>D", vim.lsp.buf.type_definition, opts)
          vim.keymap.set("n", "<space>rn", vim.lsp.buf.rename, opts)
          vim.keymap.set("n", "<space>ca", vim.lsp.buf.code_action, opts)
          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
          vim.keymap.set("n", "<space>f", function()
            vim.lsp.buf.format({ async = true })
          end, opts)
        end,
      })

      -- Set up Language Servers
      local servers = {
        lua_ls = {
          settings = {
            Lua = {
              diagnostics = {
                globals = { "vim" },
              },
              workspace = {
                library = vim.api.nvim_get_runtime_file("", true),
                checkThirdParty = false,
              },
              telemetry = {
                enable = false,
              },
            },
          },
        },
      }
-- [[ if eq .chezmoi.os "darwin" ]] --
      -- Additional LSPs for macOS
      servers.bashls = {}
      servers.clangd = {}
      servers.cssls = {}
      servers.html = {}
      servers.jsonls = {}
-- [[ end ]] --

      -- Set up servers with capabilities
      for server_name, config in pairs(servers) do
        config.capabilities = capabilities
        lspconfig[server_name].setup(config)
      end
    end,
  },

  -- LSP Server installer
  {
    "mason-org/mason.nvim",
    build = ":MasonUpdate",
    config = function()
      require("mason").setup({
        ui = {
          border = "rounded",
          icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗",
          },
        },
      })
    end,
  },

  -- Mason-lspconfig bridge
  {
    "williamboman/mason-lspconfig.nvim",
    dependencies = { "mason-org/mason.nvim" },
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = {
          "lua_ls",
-- [[ if eq .chezmoi.os "darwin" ]] --
          -- Additional LSPs for macOS
          "bashls",
          "clangd",
          "cssls",
          "html",
          "jsonls",
-- [[ end ]] --
        },
        automatic_installation = true,
      })
    end,
  },
})

-- vim: ts=2 sts=2 sw=2 et
