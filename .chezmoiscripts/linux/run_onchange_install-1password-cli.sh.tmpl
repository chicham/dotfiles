#!/bin/sh
# chezmoi:template:left-delimiter="# [[" right-delimiter="]] #"
# shellcheck disable=SC2317

# Install 1Password CLI (op) for Linux without requiring root
# https://developer.1password.com/docs/cli/
# Uses the official 1Password download sources

set -eu

# Check if 1Password CLI is already installed
if command -v op > /dev/null 2>&1; then
  echo "1Password CLI (op) already installed."
  echo "Version: $(op --version)"
  exit 0
fi

echo "Installing 1Password CLI..."

# Define a stable fallback version in case version detection fails
FALLBACK_VERSION="2.24.0"

# Function to get the latest version from the 1Password update page
get_latest_cli_version() {
  CLI_URL="https://app-updates.agilebits.com/product_history/CLI2"

  # Try to fetch the latest version using curl
  if ! VERSION=$(curl -sS --connect-timeout 10 "$CLI_URL" | awk -v RS='<h3>|</h3>' 'NR % 2 == 0 {gsub(/[[:blank:]]+/, ""); gsub(/<span[^>]*>|<\/span>|[\r\n]+/, ""); gsub(/&nbsp;.*$/, ""); if (!seen && !/beta/){print; seen=1;}}' | sed 's/^v//'); then
    echo "Failed to fetch latest version from 1Password update page."
    return 1
  fi

  # If version is empty, return error
  if [ -z "$VERSION" ]; then
    echo "Could not parse version number from 1Password update page."
    return 1
  fi

  # Return the version
  echo "$VERSION"
}

# Create temporary directory for the download
TEMP_DIR=$(mktemp -d)
cd "${TEMP_DIR}"

# Try to get the latest version
echo "Checking for latest 1Password CLI version..."
LATEST_VERSION=$(get_latest_cli_version || echo "")

if [ -z "$LATEST_VERSION" ]; then
  echo "Failed to determine latest version. Using fallback version ${FALLBACK_VERSION}."
  LATEST_VERSION="${FALLBACK_VERSION}"
else
  echo "Found latest 1Password CLI version: ${LATEST_VERSION}"
fi

# Format version with v prefix for download URL
VERSION_PREFIX="v${LATEST_VERSION}"

# Set architecture based on Chezmoi's built-in variables
# [[ if eq .chezmoi.arch "amd64" -]] #
ARCH_NAME="amd64"
# [[ else if eq .chezmoi.arch "arm64" -]] #
ARCH_NAME="arm64"
# [[ else if eq .chezmoi.arch "386" -]] #
ARCH_NAME="386"
# [[ else -]] #
echo "Error: Unsupported architecture: {{ .chezmoi.arch }}"
exit 1
# [[ end -]] #

# Set download URL using the correct op2 path format
DOWNLOAD_URL="https://cache.agilebits.com/dist/1P/op2/pkg/${VERSION_PREFIX}/op_linux_${ARCH_NAME}_${VERSION_PREFIX}.zip"
echo "Downloading 1Password CLI from ${DOWNLOAD_URL}..."

# Download with error handling
if ! curl -sSfLo op.zip "$DOWNLOAD_URL"; then
  echo "Error: Download failed from ${DOWNLOAD_URL}"
  cd - > /dev/null
  rm -rf "${TEMP_DIR}"
  exit 1
fi

# Verify file exists and has content
if [ ! -s op.zip ]; then
  echo "Error: Downloaded file is empty."
  cd - > /dev/null
  rm -rf "${TEMP_DIR}"
  exit 1
fi

# Create directory for binaries if needed
mkdir -p "${HOME}/.local/bin"

# Extract with better error handling
echo "Extracting 1Password CLI..."
if ! unzip -od "${TEMP_DIR}" op.zip; then
  echo "Error: Failed to extract zip file. The download might be corrupted."
  cd - > /dev/null
  rm -rf "${TEMP_DIR}"
  exit 1
fi

# Find and copy the binary
if [ -f "${TEMP_DIR}/op" ]; then
  cp "${TEMP_DIR}/op" "${HOME}/.local/bin/"
  chmod +x "${HOME}/.local/bin/op"
else
  echo "Error: Extracted zip file doesn't contain the expected binary."
  cd - > /dev/null
  rm -rf "${TEMP_DIR}"
  exit 1
fi

# Verify the binary works
if ! "${HOME}/.local/bin/op" --version > /dev/null 2>&1; then
  echo "Error: The installed binary doesn't seem to work correctly."
  cd - > /dev/null
  rm -rf "${TEMP_DIR}"
  exit 1
fi

# Cleanup
cd - > /dev/null
rm -rf "${TEMP_DIR}"

echo "1Password CLI installed successfully to ${HOME}/.local/bin/op"
echo "Version: $("${HOME}"/.local/bin/op --version)"
echo "Usage: op --help"
echo "For service account creation: op service-account create \"My Service Account\" --can-create-vaults --expires-in 24h --vault Production:read_items,write_items"
